{"ast":null,"code":"var _jsxFileName = \"D:\\\\2077\\\\ForMerging-master\\\\ForMerging\\\\src\\\\components\\\\admin\\\\rooms\\\\addEditRooms.js\";\nimport React, { Component } from 'react';\nimport AdminLayout from '../../../HOC/AdminLayout';\nimport FormField from \"../../ui/formFields\";\nimport { validate } from '../../ui/misc';\nimport { withRouter } from 'react-router-dom';\nimport { firebaseRooms, firebaseDB, firebase } from '../../../firebase';\nimport Fileuploader from '../../ui/fileUploader';\n\nclass AddEditRooms extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      roomId: '',\n      formType: '',\n      formError: false,\n      formSuccess: '',\n      defaultImg: '',\n      formdata: {\n        name: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'name_input',\n            type: 'text',\n            label: 'Name of Room',\n            class: 'form-control'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          validationMessage: '',\n          showlabel: true\n        },\n        description: {\n          element: 'textarea',\n          value: '',\n          config: {\n            name: 'desc_input',\n            type: 'textarea',\n            label: 'Short description about room',\n            class: 'form-control'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          validationMessage: '',\n          showlabel: true\n        },\n        price: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'price_input',\n            type: 'text',\n            label: 'Price of the room',\n            class: 'form-control'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          validationMessage: '',\n          showlabel: true\n        },\n        amenities: {\n          element: 'textarea',\n          value: '',\n          config: {\n            name: 'amenities_input',\n            type: 'text',\n            label: 'List of available amenities',\n            class: 'form-control',\n            placeholder: 'Add amenities seperated by comma( , ) eg: AC, TV etc.'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          validationMessage: '',\n          showlabel: true\n        },\n        max_guests: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'max_guests_input',\n            type: 'text',\n            label: 'Max no of guests in a room',\n            class: 'form-control'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          validationMessage: '',\n          showlabel: true\n        },\n        image: {\n          element: 'image',\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: true\n        }\n      }\n    };\n\n    this.updateFields = (room, roomId, type, defaultImg) => {\n      const newFormData = { ...this.state.formdata\n      };\n      /* console.log(room)\r\n      console.log(newFormData) */\n\n      for (let key in newFormData) {\n        newFormData[key].value = room[key];\n        newFormData[key].valid = true;\n      } //as key and value are same\n\n\n      this.setState({\n        roomId,\n        defaultImg,\n        formType: type,\n        formdata: newFormData\n      });\n    };\n\n    this.successForm = message => {\n      this.setState({\n        formSuccess: message\n      });\n      setTimeout(() => {\n        this.setState({\n          formSuccess: ''\n        });\n      }, 2000);\n    };\n  }\n\n  componentDidMount() {\n    const roomId = this.props.match.params.id;\n\n    if (!roomId) {\n      this.setState({\n        formType: 'Add Room'\n      });\n    } else {\n      //edit room\n      firebaseDB.ref(`rooms/${roomId}`).once('value').then(snapshot => {\n        const roomData = snapshot.val();\n        let promise = new Promise((resolve, reject) => {\n          firebase.storage().ref('/rooms').child(roomData.image).getDownloadURL().then(url => {\n            roomData.url = url;\n            resolve();\n          }).catch(error => {\n            reject(error);\n          });\n        });\n        promise.then(() => {\n          this.updateFields(roomData, roomId, 'Edit Room', roomData.url);\n        });\n      });\n    }\n  }\n\n  removingCode() {\n    const roomId = this.props.match.params.id;\n    firebaseDB.ref(`rooms/${roomId}`).once('value').then(snapshot => {\n      const roomData = snapshot.val();\n      firebase.storage().ref('/rooms').child(roomData.image).getDownloadURL().then(url => {\n        this.updateFields(roomData, roomId, 'Edit Room', url);\n      });\n    });\n  }\n\n  updateForm(element, content = \"\") {\n    //not good to mutate the state so copy the state and work on this\n    const newFormData = { ...this.state.formdata\n    }; //get the email state\n\n    const newElement = { ...newFormData[element.id]\n    };\n\n    if (content === '') {\n      newElement.value = element.event.target.value;\n    } else {\n      newElement.value = content;\n    }\n\n    let validData = validate(newElement);\n    newElement.valid = validData[0];\n    newElement.validationMessage = validData[1];\n    newFormData[element.id] = newElement;\n    this.setState({\n      formError: false,\n      formdata: newFormData\n    }); //console.log(this.state.formdata.email.value)\n  }\n\n  submitForm(event) {\n    event.preventDefault();\n    let dataToSubmit = {};\n    let formIsValid = true;\n\n    for (let key in this.state.formdata) {\n      dataToSubmit[key] = this.state.formdata[key].value; //as formisValid is changing for each element\n\n      formIsValid = this.state.formdata[key].valid && formIsValid;\n    }\n\n    if (formIsValid) {\n      if (this.state.formType === 'Edit Room') {\n        firebaseDB.ref(`rooms/${this.state.roomId}`).update(dataToSubmit).then(() => {\n          this.successForm('Updated Successfully');\n        }).catch(e => {\n          this.setState({\n            formError: true\n          });\n          console.log('erroe', e);\n        });\n      } else {\n        firebaseRooms.push(dataToSubmit).then(() => {\n          this.props.history.push('/admin_rooms');\n        }).catch(error => {\n          console.log('Error occured', error);\n          this.setState({\n            formError: true\n          });\n        });\n      }\n    } else {\n      this.setState({\n        formError: true\n      });\n    }\n  }\n\n  resetImage() {\n    const newFormData = { ...this.state.formdata\n    };\n    newFormData['image'].value = '';\n    newFormData['image'].valid = false;\n    this.setState({\n      defaultImg: '',\n      formdata: newFormData\n    });\n  }\n\n  storeFilename(filename) {\n    this.updateForm({\n      id: 'image'\n    }, filename);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(AdminLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      style: {\n        textAlign: 'center',\n        flexDirection: 'column'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 25\n      }\n    }, this.state.formType), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"add_room_form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: event => this.submitForm(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Fileuploader, {\n      dir: \"rooms\",\n      tag: \"Room image\",\n      defaultImg: this.state.defaultImg,\n      defaultImgName: this.state.formdata.image.value,\n      resetImage: () => this.resetImage(),\n      filename: filename => this.storeFilename(filename),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: 'name',\n      formData: this.state.formdata.name,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: 'description',\n      formData: this.state.formdata.description,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: 'price',\n      formData: this.state.formdata.price,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: 'amenities',\n      formData: this.state.formdata.amenities,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: 'max_guests',\n      formData: this.state.formdata.max_guests,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"success_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 29\n      }\n    }, this.state.formSuccess), this.state.formError ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 33\n      }\n    }, \"Something is wrong\") : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"admin_submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: event => this.submitForm(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 37\n      }\n    }, this.state.formType)))))));\n  }\n\n}\n\nexport default withRouter(AddEditRooms);","map":{"version":3,"sources":["D:/2077/ForMerging-master/ForMerging/src/components/admin/rooms/addEditRooms.js"],"names":["React","Component","AdminLayout","FormField","validate","withRouter","firebaseRooms","firebaseDB","firebase","Fileuploader","AddEditRooms","state","roomId","formType","formError","formSuccess","defaultImg","formdata","name","element","value","config","type","label","class","validation","required","valid","validationMessage","showlabel","description","price","amenities","placeholder","max_guests","image","updateFields","room","newFormData","key","setState","successForm","message","setTimeout","componentDidMount","props","match","params","id","ref","once","then","snapshot","roomData","val","promise","Promise","resolve","reject","storage","child","getDownloadURL","url","catch","error","removingCode","updateForm","content","newElement","event","target","validData","submitForm","preventDefault","dataToSubmit","formIsValid","update","e","console","log","push","history","resetImage","storeFilename","filename","render","textAlign","flexDirection"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport AdminLayout from '../../../HOC/AdminLayout';\r\n\r\nimport FormField from \"../../ui/formFields\";\r\nimport {validate} from '../../ui/misc';\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport {firebaseRooms, firebaseDB , firebase } from '../../../firebase';\r\nimport Fileuploader from '../../ui/fileUploader';\r\n\r\n\r\nclass AddEditRooms extends Component {\r\n\r\n    state = {\r\n        roomId : '',\r\n        formType: '',\r\n        formError: false,\r\n        formSuccess: '',\r\n        defaultImg: '',\r\n        formdata:{\r\n            name:{\r\n                element:'input',\r\n                value:'',\r\n                config:{\r\n                    name:'name_input',\r\n                    type:'text',\r\n                    label: 'Name of Room',\r\n                    class: 'form-control'\r\n                },\r\n                validation:{\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                validationMessage:'',\r\n                showlabel: true\r\n            },\r\n            description:{\r\n                element:'textarea',\r\n                value:'',\r\n                config:{\r\n                    name:'desc_input',\r\n                    type:'textarea',\r\n                    label: 'Short description about room',\r\n                    class: 'form-control'\r\n                },\r\n                validation:{\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                validationMessage:'',\r\n                showlabel: true\r\n            },\r\n            price:{\r\n                element:'input',\r\n                value:'',\r\n                config:{\r\n                    name:'price_input',\r\n                    type:'text',\r\n                    label: 'Price of the room',\r\n                    class: 'form-control'\r\n                },\r\n                validation:{\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                validationMessage:'',\r\n                showlabel: true\r\n            },\r\n            amenities:{\r\n                element:'textarea',\r\n                value:'',\r\n                config:{\r\n                    name:'amenities_input',\r\n                    type:'text',\r\n                    label: 'List of available amenities',\r\n                    class:'form-control',\r\n                    placeholder: 'Add amenities seperated by comma( , ) eg: AC, TV etc.'\r\n                },\r\n                validation:{\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                validationMessage:'',\r\n                showlabel: true\r\n            },\r\n            max_guests:{\r\n                element:'input',\r\n                value:'',\r\n                config:{\r\n                    name:'max_guests_input',\r\n                    type:'text',\r\n                    label: 'Max no of guests in a room',\r\n                    class: 'form-control'\r\n                },\r\n                validation:{\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                validationMessage:'',\r\n                showlabel: true\r\n            },\r\n            image: {\r\n                element: 'image',\r\n                value: '',\r\n                validation:{\r\n                    required: true\r\n                },\r\n                valid:true\r\n            }\r\n        }\r\n    }\r\n\r\n    updateFields = (room, roomId, type, defaultImg) => {\r\n        const newFormData = {...this.state.formdata}\r\n        /* console.log(room)\r\n        console.log(newFormData) */\r\n        for(let key in newFormData){\r\n            newFormData[key].value = room[key];\r\n            newFormData[key].valid = true;\r\n        }\r\n        //as key and value are same\r\n        this.setState({\r\n            roomId,\r\n            defaultImg,\r\n            formType: type,\r\n            formdata: newFormData\r\n        })\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        const roomId = this.props.match.params.id;\r\n\r\n        if(!roomId){\r\n            this.setState({\r\n                formType: 'Add Room'\r\n            })\r\n        }else{\r\n            //edit room\r\n            firebaseDB.ref(`rooms/${roomId}`).once('value').then((snapshot)=>{\r\n                const roomData = snapshot.val();\r\n                let promise = new Promise((resolve, reject) => {\r\n                    firebase.storage().ref('/rooms')\r\n                    .child(roomData.image).getDownloadURL()\r\n                    .then( url => {\r\n                        roomData.url = url;\r\n                        resolve();\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n                promise.then(()=>{\r\n                    this.updateFields(roomData, roomId, 'Edit Room', roomData.url)\r\n                }) \r\n            })\r\n        }\r\n    }\r\n\r\n    removingCode(){\r\n        const roomId = this.props.match.params.id;\r\n        firebaseDB.ref(`rooms/${roomId}`).once('value').then((snapshot)=>{\r\n            const roomData = snapshot.val();\r\n            firebase.storage().ref('/rooms')\r\n                .child(roomData.image).getDownloadURL()\r\n                .then( url => {\r\n                    this.updateFields(roomData, roomId, 'Edit Room', url)\r\n                })\r\n            })\r\n    }\r\n\r\n    updateForm(element, content=\"\"){\r\n        //not good to mutate the state so copy the state and work on this\r\n        const newFormData = { ...this.state.formdata};\r\n        //get the email state\r\n        const newElement = {...newFormData[element.id]}\r\n    \r\n        if(content === ''){\r\n            newElement.value = element.event.target.value;\r\n        }else{\r\n            newElement.value = content;\r\n        }\r\n        \r\n\r\n        let validData = validate(newElement)\r\n        \r\n        newElement.valid = validData[0];\r\n        newElement.validationMessage = validData[1]\r\n\r\n        newFormData[element.id] = newElement;\r\n        \r\n        \r\n        this.setState({\r\n            formError: false,\r\n            formdata: newFormData\r\n        })\r\n        //console.log(this.state.formdata.email.value)\r\n    }\r\n\r\n    successForm = (message) => {\r\n        this.setState({\r\n            formSuccess: message\r\n        })\r\n        setTimeout(()=>{\r\n            this.setState({formSuccess: ''})\r\n        }, 2000)\r\n    }\r\n\r\n    submitForm(event){\r\n        event.preventDefault();\r\n        let dataToSubmit = {};\r\n        let formIsValid = true;\r\n\r\n        for(let key in this.state.formdata){\r\n            dataToSubmit[key] = this.state.formdata[key].value;\r\n            //as formisValid is changing for each element\r\n            formIsValid = this.state.formdata[key].valid && formIsValid;\r\n        }\r\n\r\n        \r\n\r\n        if(formIsValid){\r\n            if(this.state.formType === 'Edit Room'){\r\n                firebaseDB.ref(`rooms/${this.state.roomId}`)\r\n                .update(dataToSubmit).then(()=>{\r\n                    this.successForm('Updated Successfully')\r\n                }).catch((e)=>{\r\n                    this.setState({formError: true})\r\n                    console.log('erroe', e)\r\n                })\r\n\r\n            }else{\r\n                firebaseRooms.push(dataToSubmit).then(()=>{\r\n                    this.props.history.push('/admin_rooms')\r\n                }).catch((error)=>{\r\n                    console.log('Error occured', error);\r\n                    this.setState({formError: true})\r\n                })\r\n            }\r\n        }else{\r\n            this.setState({\r\n                formError: true\r\n            })\r\n        }\r\n    }\r\n\r\n    resetImage(){\r\n        const newFormData = {...this.state.formdata}\r\n        newFormData['image'].value = '';\r\n        newFormData['image'].valid = false;\r\n\r\n        this.setState({\r\n            defaultImg: '',\r\n            formdata: newFormData\r\n        })\r\n\r\n    }\r\n\r\n    storeFilename(filename){\r\n        this.updateForm({id:'image'}, filename)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <AdminLayout>\r\n                <div className=\"container\">\r\n                    <div className=\"row\" style={{textAlign:'center', flexDirection: 'column'}}>\r\n                        <h2>\r\n                            {this.state.formType}\r\n                        </h2>\r\n                        <div className=\"add_room_form\">\r\n                            <form onSubmit={(event) => this.submitForm(event)}>\r\n\r\n                            <Fileuploader \r\n                                dir=\"rooms\"\r\n                                tag={\"Room image\"}\r\n                                defaultImg={this.state.defaultImg}\r\n                                defaultImgName = {this.state.formdata.image.value}\r\n                                resetImage = {() => this.resetImage()}\r\n                                filename={(filename) => this.storeFilename(filename)}\r\n                            />\r\n\r\n                            <FormField \r\n                                id={'name'}\r\n                                formData = {this.state.formdata.name}\r\n                                change={(element)=>this.updateForm(element)}\r\n                            />\r\n\r\n                            <FormField \r\n                                id={'description'}\r\n                                formData = {this.state.formdata.description}\r\n                                change={(element)=>this.updateForm(element)}\r\n                            />\r\n\r\n                            <FormField \r\n                                id={'price'}\r\n                                formData = {this.state.formdata.price}\r\n                                change={(element)=>this.updateForm(element)}\r\n                            />\r\n\r\n                            <FormField \r\n                                id={'amenities'}\r\n                                formData = {this.state.formdata.amenities}\r\n                                change={(element)=>this.updateForm(element)}\r\n                            />\r\n\r\n                            <FormField \r\n                                id={'max_guests'}\r\n                                formData = {this.state.formdata.max_guests}\r\n                                change={(element)=>this.updateForm(element)}\r\n                            />\r\n\r\n                            <div className=\"success_label\">{this.state.formSuccess}</div>\r\n                                {this.state.formError ? \r\n                                <div className=\"error_label\">\r\n                                    Something is wrong\r\n                                </div>\r\n                                :null}\r\n                                <div className=\"admin_submit\">\r\n                                    <button className=\"btn btn-primary\" onClick={(event)=>this.submitForm(event)}>\r\n                                        {this.state.formType}\r\n                                    </button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </AdminLayout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(AddEditRooms);"]},"metadata":{},"sourceType":"module"}