{"ast":null,"code":"var _jsxFileName = \"D:\\\\2077\\\\ForMerging-master\\\\ForMerging\\\\src\\\\components\\\\header_footer\\\\newsletter\\\\index.js\";\nimport React, { Component } from 'react';\nimport { Zoom } from 'react-reveal';\nimport FormField from '../../ui/formFields';\nimport { validate } from '../../ui/misc';\nimport Button from '@material-ui/core/Button';\nimport { firebasePromotions } from '../../../firebase';\n\nclass NewsLetter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formError: false,\n      formSuccess: '',\n      formdata: {\n        email: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'email_input',\n            type: 'email',\n            placeholder: 'Enter Your Email'\n          },\n          validation: {\n            required: true,\n            email: true\n          },\n          valid: false,\n          validationMessage: ''\n        }\n      }\n    };\n  }\n\n  updateForm(element) {\n    //not good to mutate the state so copy the state and work on this\n    const newFormData = { ...this.state.formdata\n    }; //get the email state\n\n    const newElement = { ...newFormData[element.id]\n    };\n    newElement.value = element.event.target.value;\n    let validData = validate(newElement);\n    newElement.valid = validData[0];\n    newElement.validationMessage = validData[1];\n    newFormData[element.id] = newElement;\n    console.log(newFormData);\n    this.setState({\n      formError: false,\n      formdata: newFormData\n    }); //console.log(this.state.formdata.email.value)\n  }\n\n  resetFormSuccess(type) {\n    //not good to mutate the state so copy the state and work on this\n    const newFormData = { ...this.state.formdata\n    };\n\n    for (let key in newFormData) {\n      newFormData[key].value = '';\n      newFormData[key].valid = false;\n      newFormData[key].validationMessage = '';\n    }\n\n    this.setState({\n      formError: false,\n      formdata: newFormData,\n      formSuccess: type ? 'Congratulations' : 'Already Registered!!'\n    });\n    this.clearSuccessMessage();\n  }\n\n  clearSuccessMessage() {\n    setTimeout(() => {\n      this.setState({\n        formSuccess: ''\n      });\n    }, 2000);\n  }\n\n  submitForm(event) {\n    event.preventDefault();\n    let dataToSubmit = {};\n    let formIsValid = true;\n\n    for (let key in this.state.formdata) {\n      dataToSubmit[key] = this.state.formdata[key].value;\n      formIsValid = this.state.formdata[key].valid && formIsValid;\n    }\n\n    if (formIsValid) {\n      //console.log(dataToSubmit);\n      //to check whether the entered email is already on database\n      firebasePromotions.orderByChild('email').equalTo(dataToSubmit.email).once(\"value\").then(snapshot => {\n        //console.log(snapshot.val())\n        if (snapshot.val() === null) {\n          firebasePromotions.push(dataToSubmit);\n          this.resetFormSuccess(true);\n        } else {\n          this.resetFormSuccess(false);\n        }\n      }); //this.resetFormSuccess()\n    } else {\n      this.setState({\n        formError: true\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Zoom, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"footer_newsletter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, \"Sign up for latest offers!! \"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: event => this.submitForm(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"newsletter_input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormField, {\n      id: 'email',\n      formData: this.state.formdata.email,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 29\n      }\n    }), this.state.formError ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 37\n      }\n    }, \"Something's wrong. Try Again!\") : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"success_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 29\n      }\n    }, this.state.formSuccess), /*#__PURE__*/React.createElement(Button, {\n      variant: \"outlined\",\n      color: \"primary\",\n      onClick: event => this.submitForm(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 29\n      }\n    }, \"Enroll\")))));\n  }\n\n}\n\nexport default NewsLetter;","map":{"version":3,"sources":["D:/2077/ForMerging-master/ForMerging/src/components/header_footer/newsletter/index.js"],"names":["React","Component","Zoom","FormField","validate","Button","firebasePromotions","NewsLetter","state","formError","formSuccess","formdata","email","element","value","config","name","type","placeholder","validation","required","valid","validationMessage","updateForm","newFormData","newElement","id","event","target","validData","console","log","setState","resetFormSuccess","key","clearSuccessMessage","setTimeout","submitForm","preventDefault","dataToSubmit","formIsValid","orderByChild","equalTo","once","then","snapshot","val","push","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Zoom} from 'react-reveal';\r\nimport FormField from '../../ui/formFields';\r\nimport {validate} from '../../ui/misc';\r\nimport Button from '@material-ui/core/Button';\r\nimport { firebasePromotions } from '../../../firebase';\r\n\r\nclass NewsLetter extends Component {\r\n\r\n    state = {\r\n        formError: false,\r\n        formSuccess: '',\r\n        formdata: {\r\n            email:{\r\n                element: 'input',\r\n                value: '',\r\n                config: {\r\n                    name: 'email_input',\r\n                    type: 'email',\r\n                    placeholder: 'Enter Your Email'\r\n                },\r\n                validation:{\r\n                    required: true,\r\n                    email: true\r\n                },\r\n                valid: false,\r\n                validationMessage: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    updateForm(element){\r\n        //not good to mutate the state so copy the state and work on this\r\n        const newFormData = { ...this.state.formdata};\r\n        //get the email state\r\n        const newElement = {...newFormData[element.id]}\r\n    \r\n        newElement.value = element.event.target.value;\r\n\r\n        let validData = validate(newElement)\r\n        \r\n        newElement.valid = validData[0];\r\n        newElement.validationMessage = validData[1]\r\n\r\n        newFormData[element.id] = newElement;\r\n        console.log(newFormData)\r\n        \r\n        \r\n        this.setState({\r\n            formError: false,\r\n            formdata: newFormData\r\n        })\r\n        //console.log(this.state.formdata.email.value)\r\n    }\r\n\r\n    resetFormSuccess(type){\r\n        //not good to mutate the state so copy the state and work on this\r\n        const newFormData = { ...this.state.formdata};\r\n\r\n        for(let key in newFormData){\r\n            newFormData[key].value = '';\r\n            newFormData[key].valid = false;\r\n            newFormData[key].validationMessage = '';\r\n        }\r\n\r\n        this.setState({\r\n            formError: false,\r\n            formdata: newFormData,\r\n            formSuccess: type ? 'Congratulations' : 'Already Registered!!'\r\n        })\r\n\r\n        this.clearSuccessMessage();\r\n    }\r\n\r\n    clearSuccessMessage(){\r\n        setTimeout(()=>{\r\n            this.setState({formSuccess: ''});\r\n        },2000)\r\n    }\r\n\r\n    submitForm(event){\r\n        event.preventDefault();\r\n        let dataToSubmit = {};\r\n        let formIsValid = true;\r\n\r\n        for(let key in this.state.formdata){\r\n            dataToSubmit[key] = this.state.formdata[key].value;\r\n            formIsValid = this.state.formdata[key].valid && formIsValid;\r\n        }\r\n\r\n        if(formIsValid){\r\n            //console.log(dataToSubmit);\r\n            //to check whether the entered email is already on database\r\n            firebasePromotions.orderByChild('email').equalTo(dataToSubmit.email).once(\"value\")\r\n            .then((snapshot)=>{\r\n                //console.log(snapshot.val())\r\n                if(snapshot.val() === null){\r\n                    firebasePromotions.push(dataToSubmit);\r\n                    this.resetFormSuccess(true)\r\n                }else{\r\n                    this.resetFormSuccess(false)\r\n                }\r\n            })\r\n            //this.resetFormSuccess()\r\n        }else{\r\n            this.setState({\r\n                formError: true\r\n            })\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Zoom>\r\n                <div className=\"footer_newsletter\">\r\n                    <p>Sign up for latest offers!! </p>\r\n                    <form onSubmit={(event) => this.submitForm(event)}>\r\n                        <div className=\"newsletter_input\">\r\n                            <FormField\r\n                                id={'email'}\r\n                                formData = {this.state.formdata.email}\r\n                                change = {(element)=>this.updateForm(element)}\r\n                            />\r\n\r\n                            {this.state.formError ?\r\n                                    <div className=\"error_label\">Something's wrong. Try Again!</div>\r\n                                :null\r\n                            }\r\n                            <div className=\"success_label\">{this.state.formSuccess}</div>\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={(event) => this.submitForm(event)}>Enroll</Button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </Zoom>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewsLetter;"]},"metadata":{},"sourceType":"module"}