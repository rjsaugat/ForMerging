{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saugat\\\\Desktop\\\\React Dhulikhel\\\\design\\\\ForMerging\\\\src\\\\components\\\\home\\\\contact\\\\MessageUs\\\\index.js\";\nimport React, { Component } from 'react';\nimport Roll from 'react-reveal/Roll';\nimport FormField from '../../../ui/formFields';\nimport { validate } from '../../../ui/misc';\nimport Button from '@material-ui/core/Button';\nimport { firebaseMessages } from '../../../../firebase';\n\nclass MessageUs extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formError: false,\n      formSuccess: '',\n      formdata: {\n        name: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'name_input',\n            type: 'text',\n            placeholder: 'Your name',\n            class: 'form-control'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          validationMessage: ''\n        },\n        email: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'email_input',\n            type: 'email',\n            placeholder: 'email as example@email.com',\n            class: 'form-control'\n          },\n          validation: {\n            required: true,\n            email: true\n          },\n          valid: false,\n          validationMessage: ''\n        },\n        message: {\n          element: 'textarea',\n          value: '',\n          config: {\n            name: 'message_input',\n            type: 'text',\n            placeholder: 'Your Message',\n            class: 'form-control text-area'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          validationMessage: ''\n        }\n      }\n    };\n  }\n\n  updateForm(element) {\n    //not good to mutate the state so copy the state and work on this\n    const newFormData = { ...this.state.formdata\n    }; //get the email state\n\n    const newElement = { ...newFormData[element.id]\n    };\n    newElement.value = element.event.target.value;\n    let validData = validate(newElement);\n    newElement.valid = validData[0];\n    newElement.validationMessage = validData[1];\n    newFormData[element.id] = newElement;\n    console.log(newFormData);\n    this.setState({\n      formError: false,\n      formdata: newFormData\n    }); //console.log(this.state.formdata.email.value)\n  }\n\n  resetFormSuccess() {\n    //not good to mutate the state so copy the state and work on this\n    const newFormData = { ...this.state.formdata\n    };\n\n    for (let key in newFormData) {\n      newFormData[key].value = '';\n      newFormData[key].valid = false;\n      newFormData[key].validationMessage = '';\n    }\n\n    this.setState({\n      formError: false,\n      formdata: newFormData,\n      formSuccess: 'Congratulations'\n    });\n    this.clearSuccessMessage();\n  }\n\n  clearSuccessMessage() {\n    setTimeout(() => {\n      this.setState({\n        formSuccess: ''\n      });\n    }, 2000);\n  }\n\n  submitForm(event) {\n    event.preventDefault();\n    let dataToSubmit = {};\n    let formIsValid = true;\n\n    for (let key in this.state.formdata) {\n      dataToSubmit[key] = this.state.formdata[key].value;\n      formIsValid = this.state.formdata[key].valid && formIsValid;\n    }\n\n    if (formIsValid) {\n      console.log(dataToSubmit);\n      firebaseMessages.push(dataToSubmit);\n      this.resetFormSuccess();\n    } else {\n      this.setState({\n        formError: true\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Roll, {\n      right: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-us\",\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: event => this.submitForm(event),\n      className: \"message-us-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormField, {\n      id: 'name',\n      formData: this.state.formdata.name,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: 'email',\n      formData: this.state.formdata.email,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: 'message',\n      formData: this.state.formdata.message,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }\n    }), this.state.formError ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 33\n      }\n    }, \"Something's wrong. Try Again!\") : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"success_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }\n    }, this.state.formSuccess), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"green\",\n      size: \"large\",\n      onClick: event => this.submitForm(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 25\n      }\n    }, \"Send Message\"))));\n  }\n\n}\n\nexport default MessageUs;","map":{"version":3,"sources":["C:/Users/saugat/Desktop/React Dhulikhel/design/ForMerging/src/components/home/contact/MessageUs/index.js"],"names":["React","Component","Roll","FormField","validate","Button","firebaseMessages","MessageUs","state","formError","formSuccess","formdata","name","element","value","config","type","placeholder","class","validation","required","valid","validationMessage","email","message","updateForm","newFormData","newElement","id","event","target","validData","console","log","setState","resetFormSuccess","key","clearSuccessMessage","setTimeout","submitForm","preventDefault","dataToSubmit","formIsValid","push","render","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Roll from 'react-reveal/Roll';\r\nimport FormField from '../../../ui/formFields';\r\nimport {validate} from '../../../ui/misc';\r\nimport Button from '@material-ui/core/Button';\r\nimport {firebaseMessages} from '../../../../firebase'; \r\n\r\nclass MessageUs extends Component {\r\n\r\n    state = {\r\n        formError: false,\r\n        formSuccess: '',\r\n        formdata: {\r\n            name:{\r\n                element: 'input',\r\n                value: '',\r\n                config: {\r\n                    name: 'name_input',\r\n                    type: 'text',\r\n                    placeholder: 'Your name',\r\n                    class: 'form-control'\r\n                },\r\n                validation:{\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                validationMessage: ''\r\n            },\r\n            email:{\r\n                element: 'input',\r\n                value: '',\r\n                config: {\r\n                    name: 'email_input',\r\n                    type: 'email',\r\n                    placeholder: 'email as example@email.com',\r\n                    class: 'form-control'\r\n                },\r\n                validation:{\r\n                    required: true,\r\n                    email: true\r\n                },\r\n                valid: false,\r\n                validationMessage: ''\r\n            },\r\n            message:{\r\n                element: 'textarea',\r\n                value: '',\r\n                config: {\r\n                    name: 'message_input',\r\n                    type: 'text',\r\n                    placeholder: 'Your Message',\r\n                    class: 'form-control text-area'\r\n                },\r\n                validation:{\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                validationMessage: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    updateForm(element){\r\n        //not good to mutate the state so copy the state and work on this\r\n        const newFormData = { ...this.state.formdata};\r\n        //get the email state\r\n        const newElement = {...newFormData[element.id]}\r\n    \r\n        newElement.value = element.event.target.value;\r\n\r\n        let validData = validate(newElement)\r\n        \r\n        newElement.valid = validData[0];\r\n        newElement.validationMessage = validData[1]\r\n\r\n        newFormData[element.id] = newElement;\r\n        console.log(newFormData)\r\n        \r\n        \r\n        this.setState({\r\n            formError: false,\r\n            formdata: newFormData\r\n        })\r\n        //console.log(this.state.formdata.email.value)\r\n    }\r\n\r\n    resetFormSuccess(){\r\n        //not good to mutate the state so copy the state and work on this\r\n        const newFormData = { ...this.state.formdata};\r\n\r\n        for(let key in newFormData){\r\n            newFormData[key].value = '';\r\n            newFormData[key].valid = false;\r\n            newFormData[key].validationMessage = '';\r\n        }\r\n\r\n        this.setState({\r\n            formError: false,\r\n            formdata: newFormData,\r\n            formSuccess: 'Congratulations'\r\n        })\r\n\r\n        this.clearSuccessMessage();\r\n    }\r\n\r\n    clearSuccessMessage(){\r\n        setTimeout(()=>{\r\n            this.setState({formSuccess: ''});\r\n        },2000)\r\n    }\r\n\r\n    submitForm(event){\r\n        event.preventDefault();\r\n        let dataToSubmit = {};\r\n        let formIsValid = true;\r\n\r\n        for(let key in this.state.formdata){\r\n            dataToSubmit[key] = this.state.formdata[key].value;\r\n            formIsValid = this.state.formdata[key].valid && formIsValid;\r\n        }\r\n\r\n        if(formIsValid){\r\n            console.log(dataToSubmit)\r\n            firebaseMessages.push(dataToSubmit)\r\n            \r\n            this.resetFormSuccess()\r\n        }else{\r\n            this.setState({\r\n                formError: true\r\n            })\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Roll right>\r\n                <div className=\"message-us\" style={{textAlign: 'center'}}>\r\n                    <form onSubmit={(event) => this.submitForm(event)} className=\"message-us-form\">\r\n                            <FormField \r\n                            id={'name'}\r\n                            formData = {this.state.formdata.name}\r\n                            change={(element)=>this.updateForm(element)}\r\n                        />                            \r\n                        <FormField \r\n                            id={'email'}\r\n                            formData = {this.state.formdata.email}\r\n                            change={(element)=>this.updateForm(element)}\r\n                        />\r\n                        <FormField \r\n                            id={'message'}\r\n                            formData = {this.state.formdata.message}\r\n                            change={(element)=>this.updateForm(element)}\r\n                        />\r\n                        {this.state.formError ?\r\n                                <div className=\"error_label\">Something's wrong. Try Again!</div>\r\n                            :null\r\n                        }\r\n                        <div className=\"success_label\">{this.state.formSuccess}</div>\r\n                        <Button \r\n                            variant=\"contained\" \r\n                            color=\"green\" \r\n                            size=\"large\"\r\n                            onClick={(event) => this.submitForm(event)}\r\n                        >Send Message</Button>\r\n                    </form>\r\n                </div>\r\n            </Roll>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageUs;"]},"metadata":{},"sourceType":"module"}