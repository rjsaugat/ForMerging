{"ast":null,"code":"var _jsxFileName = \"D:\\\\2077\\\\ForMerging-master\\\\ForMerging\\\\src\\\\components\\\\admin\\\\about\\\\index.js\";\nimport React, { Component } from 'react';\nimport AdminLayout from '../../../HOC/AdminLayout';\nimport { withRouter } from 'react-router-dom';\nimport FormField from '../../ui/formFields';\nimport { validate } from '../../ui/misc';\nimport { firebaseAboutContent, firebaseDB } from '../../../firebase';\n\nclass AdminAbout extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      contentid: '',\n      formType: 'Edit Content',\n      formError: false,\n      formSuccess: '',\n      formdata: {\n        subtitle: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'subtitle_input',\n            type: 'text',\n            label: 'Content for subtitle',\n            class: 'form-control'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          validationMessage: '',\n          showlabel: true\n        },\n        pg_one: {\n          element: 'textarea',\n          value: '',\n          config: {\n            name: 'pg_one_input',\n            type: 'textarea',\n            label: 'First paragraph ',\n            class: 'form-control'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          validationMessage: '',\n          showlabel: true\n        },\n        pg_two: {\n          element: 'textarea',\n          value: '',\n          config: {\n            name: 'pg_two_input',\n            type: 'text',\n            label: 'Second paragraph ',\n            class: 'form-control'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          validationMessage: '',\n          showlabel: true\n        },\n        pg_three: {\n          element: 'textarea',\n          value: '',\n          config: {\n            name: 'pg_three_input',\n            type: 'text',\n            label: 'Third paragraph ',\n            class: 'form-control'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          validationMessage: '',\n          showlabel: true\n        }\n      }\n    };\n\n    this.updateFields = content => {\n      const newFormData = { ...this.state.formdata\n      };\n      /* console.log(room)\r\n      console.log(newFormData) */\n\n      for (let key in newFormData) {\n        newFormData[key].value = content[key];\n        newFormData[key].valid = true;\n      } //as key and value are same\n\n\n      this.setState({\n        formdata: newFormData\n      });\n    };\n\n    this.successForm = message => {\n      this.setState({\n        formSuccess: message\n      });\n      setTimeout(() => {\n        this.setState({\n          formSuccess: ''\n        });\n      }, 2000);\n    };\n  }\n\n  componentDidMount() {\n    firebaseAboutContent.once('value').then(snapshot => {\n      const contentObject = snapshot.val();\n      this.updateFields(contentObject);\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n\n  updateForm(element) {\n    //not good to mutate the state so copy the state and work on this\n    const newFormData = { ...this.state.formdata\n    }; //get the email state\n\n    const newElement = { ...newFormData[element.id]\n    };\n    newElement.value = element.event.target.value;\n    let validData = validate(newElement);\n    newElement.valid = validData[0];\n    newElement.validationMessage = validData[1];\n    newFormData[element.id] = newElement;\n    this.setState({\n      formError: false,\n      formdata: newFormData\n    });\n  }\n\n  submitForm(event) {\n    event.preventDefault();\n    let dataToSubmit = {};\n    let formIsValid = true;\n\n    for (let key in this.state.formdata) {\n      dataToSubmit[key] = this.state.formdata[key].value; //as formisValid is changing for each element\n\n      formIsValid = this.state.formdata[key].valid && formIsValid;\n    }\n\n    if (formIsValid) {\n      firebaseDB.ref(`aboutContent/${this.state.contentid}`).update(dataToSubmit).then(() => {\n        this.successForm('Updated Successfully');\n      }).catch(e => {\n        this.setState({\n          formError: true\n        });\n        console.log('erroe', e);\n      });\n    } else {\n      this.setState({\n        formError: true\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(AdminLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container admin-about-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 25\n      }\n    }, this.state.formType), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"add_room_form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: event => this.submitForm(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormField, {\n      id: 'subtitle',\n      formData: this.state.formdata.subtitle,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: 'pg_one',\n      formData: this.state.formdata.pg_one,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: 'pg_two',\n      formData: this.state.formdata.pg_two,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: 'pg_three',\n      formData: this.state.formdata.pg_three,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"success_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 33\n      }\n    }, this.state.formSuccess), this.state.formError ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 33\n      }\n    }, \"Something is wrong\") : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"admin_submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: event => this.submitForm(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 37\n      }\n    }, this.state.formType)))))));\n  }\n\n}\n\nexport default withRouter(AdminAbout);","map":{"version":3,"sources":["D:/2077/ForMerging-master/ForMerging/src/components/admin/about/index.js"],"names":["React","Component","AdminLayout","withRouter","FormField","validate","firebaseAboutContent","firebaseDB","AdminAbout","state","contentid","formType","formError","formSuccess","formdata","subtitle","element","value","config","name","type","label","class","validation","required","valid","validationMessage","showlabel","pg_one","pg_two","pg_three","updateFields","content","newFormData","key","setState","successForm","message","setTimeout","componentDidMount","once","then","snapshot","contentObject","val","catch","e","console","log","updateForm","newElement","id","event","target","validData","submitForm","preventDefault","dataToSubmit","formIsValid","ref","update","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport AdminLayout from '../../../HOC/AdminLayout';\r\nimport {withRouter} from 'react-router-dom'\r\nimport FormField from '../../ui/formFields';\r\nimport {validate} from '../../ui/misc';\r\nimport {firebaseAboutContent, firebaseDB} from '../../../firebase';\r\n\r\n\r\n\r\nclass AdminAbout extends Component {\r\n\r\n    state = {\r\n        contentid : '',\r\n        formType: 'Edit Content',\r\n        formError: false,\r\n        formSuccess: '',\r\n        formdata: {\r\n            subtitle: {\r\n                element:'input',\r\n                value:'',\r\n                config:{\r\n                    name:'subtitle_input',\r\n                    type:'text',\r\n                    label: 'Content for subtitle',\r\n                    class: 'form-control'\r\n                },\r\n                validation:{\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                validationMessage:'',\r\n                showlabel: true\r\n            },\r\n            pg_one: {\r\n                element:'textarea',\r\n                value:'',\r\n                config:{\r\n                    name:'pg_one_input',\r\n                    type:'textarea',\r\n                    label: 'First paragraph ',\r\n                    class: 'form-control'\r\n                },\r\n                validation:{\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                validationMessage:'',\r\n                showlabel: true\r\n            },\r\n            pg_two: {\r\n                element:'textarea',\r\n                value:'',\r\n                config:{\r\n                    name:'pg_two_input',\r\n                    type:'text',\r\n                    label: 'Second paragraph ',\r\n                    class: 'form-control'\r\n                },\r\n                validation:{\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                validationMessage:'',\r\n                showlabel: true\r\n            },\r\n            pg_three: {\r\n                element:'textarea',\r\n                value:'',\r\n                config:{\r\n                    name:'pg_three_input',\r\n                    type:'text',\r\n                    label: 'Third paragraph ',\r\n                    class: 'form-control'\r\n                },\r\n                validation:{\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                validationMessage:'',\r\n                showlabel: true\r\n            },\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        firebaseAboutContent.once('value').then((snapshot) => {\r\n            const contentObject = snapshot.val();\r\n            this.updateFields(contentObject)\r\n        }).catch( e => {\r\n            console.log(e)\r\n        })\r\n    }\r\n\r\n    updateFields = (content) => {\r\n        const newFormData = {...this.state.formdata}\r\n        /* console.log(room)\r\n        console.log(newFormData) */\r\n        for(let key in newFormData){\r\n            newFormData[key].value = content[key];\r\n            newFormData[key].valid = true;\r\n        }\r\n        //as key and value are same\r\n        this.setState({\r\n            formdata: newFormData\r\n        })\r\n    }\r\n\r\n    updateForm(element){\r\n        //not good to mutate the state so copy the state and work on this\r\n        const newFormData = { ...this.state.formdata};\r\n        //get the email state\r\n        const newElement = {...newFormData[element.id]}\r\n\r\n        newElement.value = element.event.target.value;\r\n\r\n        let validData = validate(newElement)\r\n        \r\n        newElement.valid = validData[0];\r\n        newElement.validationMessage = validData[1]\r\n\r\n        newFormData[element.id] = newElement;\r\n        this.setState({\r\n            formError: false,\r\n            formdata: newFormData\r\n        })\r\n    }\r\n\r\n    submitForm(event){\r\n        event.preventDefault();\r\n        let dataToSubmit = {};\r\n        let formIsValid = true;\r\n\r\n        for(let key in this.state.formdata){\r\n            dataToSubmit[key] = this.state.formdata[key].value;\r\n            //as formisValid is changing for each element\r\n            formIsValid = this.state.formdata[key].valid && formIsValid;\r\n        }\r\n\r\n        \r\n\r\n        if(formIsValid){\r\n            firebaseDB.ref(`aboutContent/${this.state.contentid}`)\r\n            .update(dataToSubmit).then(()=>{\r\n                this.successForm('Updated Successfully')\r\n            }).catch((e)=>{\r\n                this.setState({formError: true})\r\n                console.log('erroe', e)\r\n            })\r\n        }else{\r\n            this.setState({\r\n                formError: true\r\n            })\r\n        }\r\n    }\r\n\r\n    successForm = (message) => {\r\n        this.setState({\r\n            formSuccess: message\r\n        })\r\n        setTimeout(()=>{\r\n            this.setState({formSuccess: ''})\r\n        }, 2000)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <AdminLayout>\r\n                <div className=\"container admin-about-container\">\r\n                    <div className=\"row\">\r\n                        <h2>\r\n                            {this.state.formType}\r\n                        </h2>\r\n                        <div className=\"add_room_form\">\r\n                            <form onSubmit={(event) => this.submitForm(event)}>\r\n                                <FormField \r\n                                    id={'subtitle'}\r\n                                    formData = {this.state.formdata.subtitle}\r\n                                    change={(element)=>this.updateForm(element)}\r\n                                />\r\n                                <FormField \r\n                                    id={'pg_one'}\r\n                                    formData = {this.state.formdata.pg_one}\r\n                                    change={(element)=>this.updateForm(element)}\r\n                                />\r\n                                <FormField \r\n                                    id={'pg_two'}\r\n                                    formData = {this.state.formdata.pg_two}\r\n                                    change={(element)=>this.updateForm(element)}\r\n                                />\r\n                                <FormField \r\n                                    id={'pg_three'}\r\n                                    formData = {this.state.formdata.pg_three}\r\n                                    change={(element)=>this.updateForm(element)}\r\n                                />\r\n\r\n                                <div className=\"success_label\">{this.state.formSuccess}</div>\r\n                                {this.state.formError ? \r\n                                <div className=\"error_label\">\r\n                                    Something is wrong\r\n                                </div>\r\n                                :null}\r\n                                <div className=\"admin_submit\">\r\n                                    <button className=\"btn btn-primary\" onClick={(event)=>this.submitForm(event)}>\r\n                                        {this.state.formType}\r\n                                    </button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>                    \r\n                </div>\r\n            </AdminLayout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(AdminAbout);"]},"metadata":{},"sourceType":"module"}